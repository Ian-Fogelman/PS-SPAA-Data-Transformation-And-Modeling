-- 01 - SET THE ROLE, VIRTUAL WARE HOUSE AND DATABASE
USE ROLE accountadmin;
USE WAREHOUSE compute_wh;
USE SNOWFLAKE_SAMPLE_DATA;
USE SCHEMA TPCH_SF1;

-- 02 - RUN A QUERY FROM THE SNOWFLAKE_SAMPLE_DATA.TPCH_SF1000.CUSTOMER
SELECT TOP 10000000 * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER;

-- YOU CAN ALSO VIEW THE QUERY PROFILER DATA FROM THE SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY VIEW
SELECT *
FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE QUERY_ID = '01b514d7-0305-3f19-0006-76db00020aa6';

-- VIEW THE TOP 10 LONGEST RUNNING QUERY FOR YOUR INSTANCE
SELECT TOP 10 *
FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
ORDER BY TOTAL_ELAPSED_TIME DESC;

-- 03 USE A MORE COMPLICATED QUERY TO BETTER ANALYZE PERFORMANCE.
-- EXAMPLE QUERY
SELECT *,
RANK() OVER (PARTITION BY C_CUSTKEY ORDER BY O_TOTALPRICE) AS CUS_RANK
FROM CUSTOMER AS CUS

    JOIN ORDERS AS ORD
        ON CUS.C_CUSTKEY = ORD.O_CUSTKEY
        
    JOIN LINEITEM AS LIN
        ON ORD.O_ORDERKEY = LIN.L_ORDERKEY
        
-- TECHNIQUE 1, REDUCE THE AMOUNT OF COLUMNS IN THE SELCT WILL REDUCE SCAN FOOTPRINT 
SELECT
C_CUSTKEY,
C_NAME,
C_ADDRESS,
C_PHONE,
RANK() OVER (PARTITION BY C_CUSTKEY ORDER BY O_TOTALPRICE) AS CUS_RANK

FROM CUSTOMER AS CUS

    JOIN ORDERS AS ORD
        ON CUS.C_CUSTKEY = ORD.O_CUSTKEY
        AND YEAR(O_ORDERDATE) >= 1998 --ADDED AND YEAR FILTER
        
    JOIN LINEITEM AS LIN
        ON ORD.O_ORDERKEY = LIN.L_ORDERKEY

    
-- TECHNIQUE 2, ADD SOME LOGIC TO JOIN TO AVOID SCANNING MORE DATA
SELECT '1998' AS GRANULARITY,COUNT(*) FROM ORDERS WHERE YEAR(O_ORDERDATE) >= 1998
UNION
SELECT 'ALL', COUNT(*) FROM ORDERS

-- YEAR FILTER
SELECT
C_CUSTKEY,
C_NAME,
C_ADDRESS,
C_PHONE,
RANK() OVER (PARTITION BY C_CUSTKEY ORDER BY O_TOTALPRICE) AS CUS_RANK

FROM CUSTOMER AS CUS

    JOIN ORDERS AS ORD
        ON CUS.C_CUSTKEY = ORD.O_CUSTKEY
        AND YEAR(O_ORDERDATE) >= 1998 --ADDED AND YEAR FILTER
        
    JOIN LINEITEM AS LIN
        ON ORD.O_ORDERKEY = LIN.L_ORDERKEY

        



